    学习一种框架最先需要知道的是为什么需要使用这个框架，任何一个框架的发明都是为了解决编程中的一些痛点，打开任何一本Hibernate或者其他框架的入门书，第一章都是介绍框架的理念和优势。如果需要理解这些理念和优势那么你需要知道不使用这个框架之前是怎么处理的，才能知道框架做了一些什么事情。
    针对Spring的学习，第一步就是理解IoC和AOP；这是基础；然后学习SpringMVC，其实还是Java EE开发，如果要理解这个框架，就要知道没有这个框架之前，使用的是什么技术。
    很多新的技术只不过是引入了新的编程元素对原来技术进行了封装。
    Web开发，首先需要理解的是HTTP协议，这部分一定要深入理解。理解http请求，其实就是要知道下面这张图的含义。
    还要知道服务器发送给浏览器的响应是没有JS，CSS和图片等外部资源的，浏览器在解析响应时才会再次请求这些资源，这里会出现一些静态资源请求不到的问题，SpringMVC是怎么配置的？
    接下来，学习Servlet和JSP，这个步骤不是可以跳过的，现在流行的框架Spring MVC和Struts2其实都是基于Servlet的，只有深入理解了Servlet才能理解后面的技术。
    下面几个知识点可以检测你是否理解了Servlet：
    1.什么是ServletContext，和tomcat等web容器的关系是什么？
    简单的说，我们在浏览器点击链接和按钮产生的消息不是发送给Servlet的，而是发送给Web容器的（在JSP出现之前，Web容器也叫Servlet容器），web容器接收消息后不知道怎么处理，转交给我们编写的Servlet处理，那么web容器怎么和Servlet交流昵？于是就出现了Servlet接口，接口是定义一种规范的良好表达形式。只要我们编写的Java类符合Servlet规范，那么就能被Web容器识别并被容器管理。
    2.什么事Session？Session在实际工程中的应用场景。以及@SessionAttribute注解的局限性。
    3.JSP是面向服务器的，它并不知道浏览器是什么鬼，是我们在写JSP时预设客户端是浏览器，JSP就是一个Servlet。JSP的常用对象和指令。
    4.JSP的中文编码乱码有几种情况？各自的解决方法？提示：JSP文件的编码，浏览器的解析编码，GET请求的编码，POST的编码。
    5.Servlet是一种接口规范，其中请求和响应是Servlet容器通过方法的参数赋值HttpServletRequest或者HttpServletResponse传递的。在Struts1里面，将doGet()方法里的响应移到返回值里。在Struts2里则：
    *在Controller中彻底杜绝引入HttpServletRequest或者HttpServletResponse这样的原生Servlet对象。
    *同时将请求参数和响应数据都从响应方法中剥离到了Controller中的属性变量。
    这是一个很大的技术改造，也造成了Struts2的盛行。Spring MVC走的是中间路线，Spring的2.0.8之前的版本甚至直接使用Servlet的doGet的。Spring MVC现在开始流行主要还是因为Schema xml的精简和基于注解的配置。所以这里出现了新的知识点：Schema Based XML的相关知识和Java5引入的注解原理。
参考文献：博客专栏-SpringMVC深度探险。
强烈推荐看两遍。
还有关于Spring容器和MVC容器的关系，这里有一篇很好的介绍：
Spring与Web MVC的整合--Spring的应用上下文管理
书籍：推荐许令波的《深入分析Java Web技术内幕（修订版）》和计文柯的《深入理解spring技术内幕》，特别是第二本，对spring的分析很是彻底。

查看源码是比较快的学习方法，在一个项目里直接利用debug的方式追踪变量查看源码，而不是去阅读源码。
如何使用eclipse的debug：*Eclipse Debug界面应用详解--Eclipse Debug不为人知的秘密
简单说一下步骤：新建一个maven web项目，将需要的依赖都都添加到pom中，在pom文件夹中打开终端，运行“mvn dependency：sources”就可以下载所有pom中依赖的源码。如果是eclipse，选中项目，右键run as选择maven build...，在goal中填入“dependency:sources”,没有mvn。接着简单写一个mvc项目。假设有一个如下的handler method：我们在方法的第一行打一个断点，进行调试。
  @RequestMapping("/")
  public ModelAndView indexHandle(){
      ModelAndView mv = new ModelAndView("success");
      mv.addObject("key","hello,hsiung!");
      mv.addObject("time",new Date());
      
      return mv;
  }
一步一步往下看，可以在outline的窗口清楚地看到ModelAndView的属性和方法，可以看到ModelAndView有两个属性很重要，一个是view:Object;一个是model:ModelMap，接着可以看到上面方法的第二行调用的是如下代码：
  public ModelAndView addObject(String attributeName, Object attributeValue){
      getModelMap().addAttribute(attributeName, attributeValue);
      return this;
  }
所以model中实际使用的是ModelMap这个类，那这个类的结构是什么呢？按住Ctrl在单击ModelMap，就可以看到其实就是一个LinkedHashMap<String, Object>。
关于demo，其实spring project提供了一些很好的MVC demo,
spring-projects/spring-mvc-showcase GitHub,
spring-projects/spring-petclinic GitHub.
下载源码，到pom目录下打开终端运行： mvn eclipse:eclipse,构建成功后直接导入eclipse就可以运行查看效果了。注意，mvn命令经常一次不能成功，主要是有些maven插件下载失败以及国内网络的问题，手动删除下载失败的依赖，然后命令多运行几次就可以成功了。也可以使用开源中国的maven源。
